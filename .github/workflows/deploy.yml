# Auto-deploy to Cloudflare Workers on push to master
name: Deploy to Cloudflare Workers

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project (remove console.logs)
        run: npm run build
      
      - name: Verify Wrangler installation and credentials
        run: |
          echo "üîß Checking Wrangler version..."
          npx wrangler --version
          
          echo "üîç Testing Cloudflare authentication..."
          if ! npx wrangler whoami 2>&1; then
            echo "‚ùå Authentication failed - diagnosing issues..."
            
            # Check if secrets are available
            if [ -z "$CLOUDFLARE_API_TOKEN" ]; then
              echo "üí• CRITICAL: CLOUDFLARE_API_TOKEN secret is missing or empty"
              echo "üìã Please add CLOUDFLARE_API_TOKEN to GitHub repository secrets"
              echo "üîó Go to: Settings ‚Üí Secrets and variables ‚Üí Actions ‚Üí New repository secret"
              exit 1
            else
              echo "‚úÖ CLOUDFLARE_API_TOKEN is present (${#CLOUDFLARE_API_TOKEN} characters)"
            fi
            
            if [ -z "$CLOUDFLARE_ACCOUNT_ID" ]; then
              echo "üí• CRITICAL: CLOUDFLARE_ACCOUNT_ID secret is missing or empty"
              echo "üìã Please add CLOUDFLARE_ACCOUNT_ID to GitHub repository secrets"
              echo "üîó Go to: Settings ‚Üí Secrets and variables ‚Üí Actions ‚Üí New repository secret"
              exit 1
            else
              echo "‚úÖ CLOUDFLARE_ACCOUNT_ID is present (${#CLOUDFLARE_ACCOUNT_ID} characters)"
            fi
            
            # Test API token validity
            echo "üß™ Testing API token validity..."
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
              -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
              "https://api.cloudflare.com/client/v4/user/tokens/verify")
            
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "‚úÖ API token is valid"
            else
              echo "‚ùå API token verification failed (HTTP $HTTP_STATUS)"
              case $HTTP_STATUS in
                "401") echo "üö´ Token is invalid or expired - please regenerate" ;;
                "403") echo "üö´ Token has insufficient permissions - needs Workers:Edit + Account:Read" ;;
                *) echo "üö´ Unexpected error - check token and network connectivity" ;;
              esac
              exit 1
            fi
            
            echo "ü§î Authentication setup appears correct but wrangler whoami failed"
            echo "üîÑ This might be a temporary issue - deployment will retry automatically"
          else
            echo "‚úÖ Authentication successful!"
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      
      - name: Deploy to Cloudflare Workers (with retry)
        run: |
          echo "üöÄ Starting main worker deployment..."
          for i in {1..3}; do
            echo "üì° Deployment attempt $i of 3 for main worker..."
            
            if npx wrangler deploy --verbose 2>&1; then
              echo "‚úÖ Main worker deployment successful!"
              echo "üåê Worker deployed to: https://dr-islam-website.YOUR_SUBDOMAIN.workers.dev"
              break
            else
              DEPLOY_EXIT_CODE=$?
              echo "‚ùå Main worker deployment failed (exit code: $DEPLOY_EXIT_CODE)"
              
              if [ $i -eq 3 ]; then
                echo "üí• All main worker deployment attempts failed"
                echo "üîç Common causes:"
                echo "   ‚Ä¢ Invalid/expired CLOUDFLARE_API_TOKEN"
                echo "   ‚Ä¢ Missing Workers permissions on API token"
                echo "   ‚Ä¢ Invalid CLOUDFLARE_ACCOUNT_ID"
                echo "   ‚Ä¢ Worker name already exists in different account"
                echo "   ‚Ä¢ Cloudflare API outage"
                exit 1
              fi
              
              echo "üîÑ Retrying main worker deployment in 30 seconds..."
              sleep 30
            fi
          done
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      
      - name: Deploy Contact Form Worker (with retry)
        run: |
          echo "üìß Starting contact form worker deployment..."
          for i in {1..3}; do
            echo "üì° Deployment attempt $i of 3 for contact form worker..."
            
            if npx wrangler deploy -c wrangler-contact.toml --verbose 2>&1; then
              echo "‚úÖ Contact form worker deployment successful!"
              echo "üì¨ Contact form available at: https://dr-elsagher.com/api/contact"
              break
            else
              DEPLOY_EXIT_CODE=$?
              echo "‚ùå Contact form worker deployment failed (exit code: $DEPLOY_EXIT_CODE)"
              
              if [ $i -eq 3 ]; then
                echo "üí• All contact form worker deployment attempts failed"
                echo "üîç This might be due to:"
                echo "   ‚Ä¢ Domain routing configuration issues"
                echo "   ‚Ä¢ Missing zone permissions on API token"  
                echo "   ‚Ä¢ DNS zone not properly configured"
                echo "   ‚Ä¢ Contact form worker name conflicts"
                exit 1
              fi
              
              echo "üîÑ Retrying contact form worker deployment in 30 seconds..."
              sleep 30
            fi
          done
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
